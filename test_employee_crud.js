const axios = require('axios');

const API_BASE_URL = 'http://localhost:3333';

// Simular um token de autentica√ß√£o (voc√™ precisar√° de um token v√°lido)
const AUTH_TOKEN = 'seu_token_aqui';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Authorization': `Bearer ${AUTH_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testEmployeeCRUD() {
  console.log('üß™ Testando CRUD de Funcion√°rios...\n');

  try {
    // 1. Testar cria√ß√£o de funcion√°rio
    console.log('1Ô∏è‚É£ Criando funcion√°rio...');
    const newEmployee = {
      name: 'Jo√£o Silva',
      role: 'Motorista',
      baseSalary: 2500.00,
      status: 'Ativo',
      cpf: '123.456.789-00',
      phone: '(11) 99999-9999',
      email: 'joao.silva@empresa.com',
      address: 'Rua das Flores, 123 - S√£o Paulo/SP',
      hireDate: '2024-01-15'
    };

    const createResponse = await api.post('/employees', newEmployee);
    console.log('‚úÖ Funcion√°rio criado:', createResponse.data);
    const employeeId = createResponse.data.id;

    // 2. Testar busca de funcion√°rio
    console.log('\n2Ô∏è‚É£ Buscando funcion√°rio...');
    const getResponse = await api.get(`/employees/${employeeId}`);
    console.log('‚úÖ Funcion√°rio encontrado:', getResponse.data);

    // 3. Testar atualiza√ß√£o de funcion√°rio
    console.log('\n3Ô∏è‚É£ Atualizando funcion√°rio...');
    const updateData = {
      name: 'Jo√£o Silva Santos',
      role: 'Motorista Senior',
      baseSalary: 2800.00,
      status: 'Ativo',
      cpf: '123.456.789-00',
      phone: '(11) 98888-8888',
      email: 'joao.santos@empresa.com',
      address: 'Rua das Flores, 456 - S√£o Paulo/SP',
      hireDate: '2024-01-15'
    };

    const updateResponse = await api.put(`/employees/${employeeId}`, updateData);
    console.log('‚úÖ Funcion√°rio atualizado:', updateResponse.data);

    // 4. Testar adi√ß√£o de transa√ß√£o
    console.log('\n4Ô∏è‚É£ Adicionando transa√ß√£o...');
    const transactionData = {
      type: 'Cr√©dito',
      amount: 500.00,
      date: '2024-12-27'
    };

    const transactionResponse = await api.post(`/employees/${employeeId}/transactions`, transactionData);
    console.log('‚úÖ Transa√ß√£o criada:', transactionResponse.data);

    // 5. Testar busca de transa√ß√µes
    console.log('\n5Ô∏è‚É£ Buscando transa√ß√µes...');
    const transactionsResponse = await api.get(`/employees/${employeeId}/transactions`);
    console.log('‚úÖ Transa√ß√µes encontradas:', transactionsResponse.data);

    // 6. Testar busca com filtros
    console.log('\n6Ô∏è‚É£ Testando busca com filtros...');
    const searchResponse = await api.get('/employees/search?name=Jo√£o&status=Ativo');
    console.log('‚úÖ Busca com filtros:', searchResponse.data);

    // 7. Testar listagem de funcion√°rios
    console.log('\n7Ô∏è‚É£ Listando funcion√°rios...');
    const listResponse = await api.get('/employees');
    console.log('‚úÖ Lista de funcion√°rios:', listResponse.data);

    // 8. Testar exclus√£o de funcion√°rio
    console.log('\n8Ô∏è‚É£ Excluindo funcion√°rio...');
    await api.delete(`/employees/${employeeId}`);
    console.log('‚úÖ Funcion√°rio exclu√≠do com sucesso!');

    console.log('\nüéâ Todos os testes passaram com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Dica: Verifique se o token de autentica√ß√£o est√° v√°lido');
    }
  }
}

// Executar os testes
testEmployeeCRUD();

