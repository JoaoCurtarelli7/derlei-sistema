const { spawn } = require('child_process');
const path = require('path');

console.log('üîç DIAGN√ìSTICO DO SERVIDOR BACKEND\n');
console.log('=' .repeat(50));

// Verificar se estamos no diret√≥rio correto
const currentDir = process.cwd();
console.log(`üìÅ Diret√≥rio atual: ${currentDir}`);

// Verificar se o backend existe
const backendPath = path.join(currentDir, 'backend');
const fs = require('fs');

if (!fs.existsSync(backendPath)) {
  console.log('‚ùå Diret√≥rio backend n√£o encontrado!');
  process.exit(1);
}

console.log('‚úÖ Diret√≥rio backend encontrado');

// Verificar arquivos essenciais
const essentialFiles = [
  'package.json',
  'src/server.ts',
  'src/app.ts',
  'prisma/schema.prisma'
];

essentialFiles.forEach(file => {
  const filePath = path.join(backendPath, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - N√ÉO ENCONTRADO`);
  }
});

// Verificar depend√™ncias
console.log('\nüì¶ VERIFICANDO DEPEND√äNCIAS...');
const packageJsonPath = path.join(backendPath, 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  console.log(`   Nome: ${packageJson.name}`);
  console.log(`   Vers√£o: ${packageJson.version}`);
  console.log(`   Scripts dispon√≠veis: ${Object.keys(packageJson.scripts).join(', ')}`);
}

// Tentar iniciar o servidor
console.log('\nüöÄ TENTANDO INICIAR O SERVIDOR...');
console.log('   Comando: npm run dev');

const npmProcess = spawn('npm', ['run', 'dev'], {
  cwd: backendPath,
  stdio: 'pipe'
});

let output = '';
let errorOutput = '';

npmProcess.stdout.on('data', (data) => {
  output += data.toString();
  console.log(`   [STDOUT] ${data.toString().trim()}`);
});

npmProcess.stderr.on('data', (data) => {
  errorOutput += data.toString();
  console.log(`   [STDERR] ${data.toString().trim()}`);
});

npmProcess.on('close', (code) => {
  console.log(`\nüìä PROCESSO FINALIZADO COM C√ìDIGO: ${code}`);
  
  if (code === 0) {
    console.log('‚úÖ Servidor iniciado com sucesso!');
  } else {
    console.log('‚ùå Erro ao iniciar servidor');
    console.log('\nüîç AN√ÅLISE DO ERRO:');
    
    if (errorOutput.includes('ENOENT')) {
      console.log('   ‚ùå Arquivo n√£o encontrado - Verificar depend√™ncias');
    } else if (errorOutput.includes('EADDRINUSE')) {
      console.log('   ‚ùå Porta j√° em uso - Matar processo existente');
    } else if (errorOutput.includes('prisma')) {
      console.log('   ‚ùå Problema com Prisma - Verificar banco de dados');
    } else {
      console.log(`   ‚ùå Erro desconhecido: ${errorOutput}`);
    }
    
    console.log('\nüí° SOLU√á√ïES:');
    console.log('   1. npm install (instalar depend√™ncias)');
    console.log('   2. npx prisma generate (gerar cliente Prisma)');
    console.log('   3. npx prisma migrate dev (executar migra√ß√µes)');
    console.log('   4. Verificar se a porta 3333 est√° livre');
  }
});

// Timeout para parar o processo
setTimeout(() => {
  console.log('\n‚è∞ TIMEOUT - Parando processo...');
  npmProcess.kill();
}, 10000);

